class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n        self.parent = None\n        self.color = \"RED\"\n\nclass RedBlackTree:\n    def __init__(self):\n        self.nil = Node(None)\n        self.nil.color = \"BLACK\"\n        self.root = self.nil\n\n    def insert(self, value):\n        new_node = Node(value)\n        new_node.left = self.nil\n        new_node.right = self.nil\n\n        parent = None\n        current = self.root\n        while current != self.nil:\n            parent = current\n            if new_node.value < current.value:\n                current = current.left\n            else:\n                current = current.right\n\n        new_node.parent = parent\n        if parent is None:\n            self.root = new_node\n        elif new_node.value < parent.value:\n            parent.left = new_node\n        else:\n            parent.right = new_node\n\n        if new_node.parent is self.nil:\n            new_node.color = \"BLACK\"\n            return\n\n        self._insert_fixup(new_node)\n\n    def _insert_fixup(self, node):\n        while node.parent.color == \"RED\":\n            if node.parent == node.parent.parent.left:\n                uncle = node.parent.parent.right\n                if uncle.color == \"RED\":\n                    node.parent.color = \"BLACK\"\n                    uncle.color = \"BLACK\"\n                    node.parent.parent.color = \"RED\"\n                    node = node.parent.parent\n                else:\n                    if node == node.parent.right:\n                        node = node.parent\n                        self._left_rotate(node)\n                    node.parent.color = \"BLACK\"\n                    node.parent.parent.color = \"RED\"\n                    self._right_rotate(node.parent.parent)\n            else:\n                uncle = node.parent.parent.left\n                if uncle.color == \"RED\":\n                    node.parent.color = \"BLACK\"\n                    uncle.color = \"BLACK\"\n                    node.parent.parent.color = \"RED\"\n                    node = node.parent.parent\n                else:\n                    if node == node.parent.left:\n                        node = node.parent\n                        self._right_rotate(node)\n                    node.parent.color = \"BLACK\"\n                    node.parent.parent.color = \"RED\"\n                    self._left_rotate(node.parent.parent)\n\n        self.root.color = \"BLACK\"\n\n    def _left_rotate(self, node):\n        right_child = node.right\n        node.right = right_child.left\n        if right_child.left != self.nil:\n            right_child.left.parent = node\n\n        right_child.parent = node.parent\n        if node.parent is None:\n            self.root = right_child\n        elif node == node.parent.left:\n            node.parent.left = right_child\n        else:\n            node.parent.right = right_child\n\n        right_child.left = node\n        node.parent = right_child\n\n    def _right_rotate(self, node):\n        left_child = node.left\n        node.left = left_child.right\n        if left_child.right != self.nil:\n            left_child.right.parent = node\n\n        left_child.parent = node.parent\n        if node.parent is None:\n            self.root = left_child\n        elif node == node.parent.right:\n            node.parent.right = left_child\n        else:\n            node.parent.left = left_child\n\n        left_child.right = node\n        node.parent = left_child\n\nimport pytest\n\n@pytest.fixture\ndef create_tree():\n    tree = RedBlackTree()\n    return tree\n\ndef test_insert_single_node(create_tree):\n    tree = create_tree\n    tree.insert(10)\n    assert tree.root.value == 10\n    assert tree.root.color == \"BLACK\"\n\ndef test_insert_multiple_nodes(create_tree):\n    tree = create_tree\n    values = [10, 20, 5, 15, 25, 3, 8]\n    for value in values:\n        tree.insert(value)\n    assert tree.root.value == 10\n    assert tree.root.color == \"BLACK\"\n\ndef test_insert_duplicate_node(create_tree):\n    tree = create_tree\n    tree.insert(10)\n    tree.insert(10)\n    assert tree.root.value == 10\n    assert tree.root.color == \"BLACK\"\n\ndef test_left_rotate(create_tree):\n    tree = create_tree\n    tree.insert(10)\n    tree.insert(20)\n    tree.insert(5)\n    assert tree.root.value == 10\n    assert tree.root.left.value == 5\n    assert tree.root.right.value == 20\n\ndef test_right_rotate(create_tree):\n    tree = create_tree\n    tree.insert(10)\n    tree.insert(5)\n    tree.insert(20)\n    assert tree.root.value == 10\n    assert tree.root.left.value == 5\n    assert tree.root.right.value == 20\n